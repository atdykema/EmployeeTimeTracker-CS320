{
  "openapi": "3.0.0",
  "info": {
    "title": "PunchTime",
    "description": "PunchTime by Silicon Savants backend documentation",
    "contact": {
      "email": "andrewlin@umass.edu"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://virtserver.swaggerhub.com/Unseenmocha/PunchTime/1.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "developers",
      "description": "Operations available to regular developers"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "validates login and returns user object",
        "description": "After passing the user's email and password, we validate the credentials, sending back the Employee document associated with the user if successful, and a failure object with a 404 status code if otherwise\n",
        "operationId": "login",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "email for login",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "example": "Betty_Burke@gizmogram.com"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password for login",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "burkebe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "login validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "404": {
            "description": "login failed, user with given credentials not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          }
        }
      }
    },
    "/employeeGet": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "Returns full employee object",
        "description": "Endpoint receives as input an employeeId and a companyId, and the employee object is returned if the employee was found, throws an error otherwise\n",
        "operationId": "employeeGet",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          }
        ],
        "responses": {
          "200": {
            "description": "found employee",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "404": {
            "description": "could not find employee with given parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          }
        }
      }
    },
    "/user/time": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "returns array of user daily user time objects depending on given parameter range",
        "description": "By passing an employee's employeeId, companyId and an optional timeOption parameter, an array of timeEntry objects can be requested. On success, either all or some will be returned depending on the value of timeOption.\n",
        "operationId": "getTimeData",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "timeOption",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "'week', 'month', 'year', 'custom', or <blank>"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2022-01-01"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2023-01-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "time data found for given employee info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "404": {
            "description": "employee with given employeeId and companyId not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error or timeoption error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/user/manage": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "returns an array of the Employee objects of all employees under a given manager",
        "description": "By passing the employeeId, companyName and isManager fields of an Employee object, returns an array containing the Employee object of all employees under the manager specified by the paramters\n",
        "operationId": "getManagerSubordinates",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "companyName",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "Gizmogram"
            }
          },
          {
            "name": "isManager",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "manaager found and subordinates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/addTime": {
      "post": {
        "tags": [
          "developers"
        ],
        "summary": "record time entries for an employee",
        "description": "Receives an employee's employeeId, companyId, and an array containing the employee's time entry data and upates it in their Employeetimeentry object\n",
        "operationId": "postTime",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "companyId",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 3
            }
          },
          {
            "name": "times",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/times"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully updated employee time entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employeetimeentry"
                }
              }
            }
          },
          "404": {
            "description": "specified employee not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_404_1"
                }
              }
            }
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_500_1"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Employee": {
        "required": [
          "_id",
          "companyName",
          "employeeId",
          "firstname",
          "isManager",
          "lastname",
          "password",
          "positionTitle",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Employee__id"
          },
          "firstname": {
            "type": "string",
            "example": "Betty"
          },
          "lastname": {
            "type": "string",
            "example": "Burke"
          },
          "employeeId": {
            "type": "integer",
            "example": 1
          },
          "companyName": {
            "type": "string",
            "example": "GizmoGram"
          },
          "positionTitle": {
            "type": "string",
            "example": "CEO"
          },
          "startDate": {
            "type": "string",
            "format": "datetime",
            "example": "2014-10-05"
          },
          "isManager": {
            "type": "boolean",
            "example": true
          },
          "password": {
            "type": "string",
            "example": "burkebe"
          }
        }
      },
      "Employeetimeentry": {
        "required": [
          "_id",
          "companyId",
          "employeeId",
          "timeentries"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Employee__id"
          },
          "employeeId": {
            "type": "integer",
            "example": 1
          },
          "companyId": {
            "type": "integer",
            "example": 3
          },
          "timeentries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Employeetimeentry_timeentries"
            }
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "example": "OK"
          },
          "value": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "inline_response_404": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "example": "FAILURE"
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "example": "OK"
          },
          "value": {
            "$ref": "#/components/schemas/Employeetimeentry"
          }
        }
      },
      "inline_response_500": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "example": "FAILURE: timeOption error."
          }
        }
      },
      "times": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/times"
        }
      },
      "inline_response_404_1": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Employee not found"
          }
        }
      },
      "inline_response_500_1": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "failed to update user"
          },
          "error": {
            "$ref": "#/components/schemas/inline_response_500_1_error"
          }
        }
      },
      "Employee__id": {
        "type": "object",
        "properties": {
          "oid": {
            "type": "string",
            "example": "641a8aee8c1eff050b518093"
          }
        }
      },
      "Employeetimeentry_timeentries": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "example": "2023-02-01"
          },
          "hoursWorked": {
            "type": "number",
            "example": 7.52
          },
          "_id": {
            "$ref": "#/components/schemas/Employee__id"
          }
        }
      },
      "inline_response_500_1_error": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "ValidationError"
          },
          "message": {
            "type": "string",
            "example": "Validation failed"
          }
        }
      }
    }
  }
}